
/*-----------author:贺文榜   date:2017.7.8----------*/
/*
* 正则的一些理解：
* 正则是什么：正则定义了一个字符串的模型：
* 用来干什么：1、验证某字符串是否和这个模型相匹配 2、把匹配到的内容找出来
* 记住：它是用来处理字符串的，特长就是处理复杂的字符串 （所以遇到复杂的字符串想想正则）
* */

//创建正则的2种方式：
var reg=/abcd/;      //------------这个叫做对象的直接量方式
var reg =new RegExp("\\w"+str+"\\w",g); //---------构造函数方式匹配（这种方式匹配变量非常好用，记得这里的\要转义）

//接下来介绍 常见的这么几个  ？ ？： ？=  ？！
//? 有俩种意思：1、匹配前面的子表达式零次或者一次   2、取消正则贪婪模式，（紧紧跟在其他限制符的后面(? + * {n} {n,m} {n,})）
//取消贪婪模式的demo
   var str ="hhhhh";
   var reg=/h+?/;                      //   用到的正则方法exec下面解释
alert(reg.exec(str));//-----h
//?: 代表正则分组里面匹配到的内容值只匹配不捕获  自认为可以提高点正则的效率（只要是分组里面的内容不需要捕获，我们统统加上它?:）
//正向预查 ?=  格式：（？=pattern）很少用
//正向预查demo:
    var str1="hewenbang6";
    var str2="hewenbang7";
    var reg=/hewenbang(?=7)/;//括号里面的字符串只起到检测格式的作用并不参与匹配
    alert(reg.exec(str1));//---------null
    alert(reg.exec(str2));//---------hewenbang
//方向预查： ？！ （？！pattern）很少用
    var str1="hewenbang6";
    var str2="hewenbang7";
    var reg=/hewenbang(?!7)/;//括号里面的字符串只起到检测格式的作用并不参与匹配
    alert(reg.exec(str1));//---------hewenbang
    alert(reg.exec(str2));//---------null

//分组和反向引用   （注意点：匹配到的内容也要一模一样）
    var reg=/(\w)\1/;
    var str="bbu.ss";
    alert(reg.exec(str));

//正则表达式的exec方法：
    //提到正则表达式的exec方法不得不说正则对象的lastindex属性：它的作用是规定当前这次的匹配的开始位置是从哪儿开始的，如果没有设置模式修正符那么lastindex的值永远为0也就是上面为啥 匹配到一样的内容了，如果设置了g，那么exec方法执行之后就会更新正则表达式的lastindex属性，表示本次匹配成功后，所匹配字符串的下一个字符的索引，下一次在用这个正则表达式匹配字符串的时候，就会从上次的lastindex属性开始匹配！
    //demo:(不加模式修正符号：g)
    var reg=/(\w)(\w)(\w)/;
    var str="bbs.hwbyouyu.com";
    var result=reg.exec(str);
    var result1=reg.exec(str);
    //------------这样的化执行多少次结果都是一样
    //exec方法的返回值： 返回的数组  没有分组的话返回的形式为：
    for (attr in result){
         console.log("result的属性名："+attr+"属性值为："+result[attr]);

    }
    //输出的第一个为 0   bbs  大正则匹配到的内容
    //            1   b    第一个小分组匹配到内容
    //            2   b   第二个小分组匹配到的内容
    //            3  s    第三个小分组匹配到的内容
    //          index 0  大正则匹配到的内容，出现在原字符串中的位置
    //          input "bbs.hwbyouyu.com"     原字符串str

    //exec 注意点：    1、即使正则设置了g模式修正符。exec方法也不会自动的进行全文查找，但会修改正则对象的lastindex值，        2、  他的特长在于不但可以捕获到整个正则匹配到的内容,还可以捕捉到子分组里面的内容，

       //因为它不会进行全文查找   所以我们要自己写个全文查找的方法把总正则和子正则匹配到的内容全取到

        function  allExec(str,reg){
            reg.lastIndex=0;
            var a=[];
            var result=null;
            while(result=reg.exec(str)){
                a.push(result);
            }
            return a;
        }

 //使用字符串的方式执行正则表达式
    var str ="2013-11-21 21:46:36";
    var a=str.split(/[- :]/);
    a=['2013','11','21','21','46','36'];
    //split的第二个参数可以指定其长度
    var b=str.split(/[- :]/,3);
    b=['2013','11','21'];

    //search 方法返回匹配到的内容在字符串的第一次出现的位置
    //match  和exec 返回值一样   只有加了g  match 和exec就有区别了：match匹配一次成功后不会停止，而是继续找到所有可以匹配的字符，
    //match和exec方法的用法区别： exec处理分组的功能更强， match在没有分组的情况下，能够更快捷的把多次匹配到的内容保存到数组里面

                       /*功能最强大之replace方法*/
    //replace 第二个参数不是一个函数的时候就是把第一个参数匹配到的内容用第二个参数替换
    //replace 第二个参数是一个函数：结合以下实例理解：
//匹配URL参数的正则
function change(string) {
    var obj = {};
    var reg = /([^?=&]+)=([^?=&]+)/g;
    //这个正则匹配等号左边除了？= &这三个字符的其他字符一次或者多次（等号右边也一样）
    string.replace(reg, function () {
        //第一次匹配到的应该还a=1;这个匿名函数默认有三个参数
        //默认第一个参数：大正则匹配到的字符串
        //默认第二个参数：大正则匹配到的字符串在原字符串中（在这里原字符串也就是string）出现的索引位置
        //默认第三个参数：要匹配的字符串（在这里就是string）
        //-----------但是在正则中出现小分组的时候情况就发生了变化小分组匹配到的内容从默认第一个参数后面（也就是arguments这个类数组索引1的位置）开始给arguments这个类数组往进添加；  默认的后面俩个参数依旧是最后面的位置-------总结有小分组就从arguments类数组索引1的位置开始取
        console.dir(arguments);
        obj[arguments[1]] = arguments[2];
    })
    return obj;
}
var str="wwww.youyu.com/tiansao?a=1&b=2";
//大家可以输出来看下
var obj= change(str);
console.log(obj);
/*匹配中文汉字*/
var str="2345678";
var arr=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"];
var reg=/\d/g;
str=str.replace(reg, function () {
    return arr[arguments[0]];
});
/*
 * 万能的时间转化格式
 * */
String.prototype.myFormatTime = function () {
    var reg = /^(\d{4})(?:-|\/|\.|:)(\d{1,2})(?:-|\/|\.|:)(\d{1,2})(?:\s+)(\d{1,2})(?:-|\/|\.|:)(\d{1,2})(?:-|\/|\.|:)(\d{1,2})$/g;
    var ary = [];
    this.replace(reg, function () {
        ary = ([].slice.call(arguments)).slice(1, 7);
    });
    var format = arguments[0] || "{0}年{1}月{2}日 {3}:{4}:{5}";
    return format.replace(/{(\d+)}/g, function () {
        var val = ary[arguments[1]];
        return val.length === 1 ? "0" + val : val;
    });
}
/*
 * 字符串的截取
 * */
strPro.myTrim = function () {
    return this.replace(/(^\s*|\s*$)/g,"");//\s匹配空格回车换行符号
}

//区分汉字和字母的截取字符串
strPro.mySub = function () {
    var len = arguments[0] || 10;
    var isD = arguments[1] || false;//默认是不加的，想加的话传true
    var str = "", n = 0;
    for (var i = 0; i < this.length; i++) {
        var s = this.charAt(i);
        /[\u4e00-\u9fa5]/.test(s) ? n += 2 : n++;
        if (n > len) {
            isD ? str += "..." : void 0;
            break;
        }
        str += s;
    }
    return str;
}


var str = "     【网络营销】网络营销是asd一种利用互联网的营销形式，建立在互联网的基础上，以线上营销为导向，网络为工具，由营销人员利用专业的网络营销工具，面向广大网民开展一系列营销活动的新型营销方式。虽然网络营销很受大小企业喜欢，但真正能够让网络营销产生执行力的却少之又少，该如何增加其执行力？    ";
str = str.myTrim();
str = str.mySub(38, true);

//* 1万能的匹配有效数字字符串

var reg=/^(?:[+-]?)(?:\d|(?:[1-9]\d+))(?:\.\d+)?$/;
/*
 * 万能的邮箱正则
 * */
var reg=/^([0-9a-zA-Z._-]+])@([0-9a-zA-Z-]+)(\.[a-zA-Z]+){1,2}/;